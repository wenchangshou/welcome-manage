// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	backgroundFieldNames          = builder.RawFieldNames(&Background{})
	backgroundRows                = strings.Join(backgroundFieldNames, ",")
	backgroundRowsExpectAutoSet   = strings.Join(stringx.Remove(backgroundFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	backgroundRowsWithPlaceHolder = strings.Join(stringx.Remove(backgroundFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBackgroundIdPrefix = "cache:background:id:"
)

type (
	backgroundModel interface {
		Insert(ctx context.Context, data *Background) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Background, error)
		Update(ctx context.Context, newData *Background) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBackgroundModel struct {
		sqlc.CachedConn
		table string
	}

	Background struct {
		Id      int64          `db:"id"`
		Type    sql.NullString `db:"type"`
		ImgId   sql.NullInt64  `db:"img_id"`
		VideoId sql.NullInt64  `db:"video_id"`
	}
)

func newBackgroundModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBackgroundModel {
	return &defaultBackgroundModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`background`",
	}
}

func (m *defaultBackgroundModel) Delete(ctx context.Context, id int64) error {
	backgroundIdKey := fmt.Sprintf("%s%v", cacheBackgroundIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, backgroundIdKey)
	return err
}

func (m *defaultBackgroundModel) FindOne(ctx context.Context, id int64) (*Background, error) {
	backgroundIdKey := fmt.Sprintf("%s%v", cacheBackgroundIdPrefix, id)
	var resp Background
	err := m.QueryRowCtx(ctx, &resp, backgroundIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", backgroundRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBackgroundModel) Insert(ctx context.Context, data *Background) (sql.Result, error) {
	backgroundIdKey := fmt.Sprintf("%s%v", cacheBackgroundIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, backgroundRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Type, data.ImgId, data.VideoId)
	}, backgroundIdKey)
	return ret, err
}

func (m *defaultBackgroundModel) Update(ctx context.Context, data *Background) error {
	backgroundIdKey := fmt.Sprintf("%s%v", cacheBackgroundIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, backgroundRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Type, data.ImgId, data.VideoId, data.Id)
	}, backgroundIdKey)
	return err
}

func (m *defaultBackgroundModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBackgroundIdPrefix, primary)
}

func (m *defaultBackgroundModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", backgroundRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBackgroundModel) tableName() string {
	return m.table
}
